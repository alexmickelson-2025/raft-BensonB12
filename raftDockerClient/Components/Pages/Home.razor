@page "/"
@using Logic.Models.Args;
@using Logic.Models.Server
@using Logic.Models.Server.Logging
@using Logic.Utils
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container mt-4">
  <div class="h-3 fw-bold">Time Values</div>
  <p class="text-muted">
    Election Timer Range: <strong>@Constants.INCLUSIVE_MINIMUM_ELECTION_INTERVAL</strong> to
    <strong>@Constants.EXCLUSIVE_MAXIMUM_ELECTION_INTERVAL</strong>
  </p>
  <p class="text-muted">
    HeartBeats take <strong>@Constants.HEARTBEAT_PAUSE</strong>
  </p>

  <hr>

  <h5 class="mt-3">Server URLs</h5>
  <ul class="list-group mb-4">
    @foreach (string url in Urls)
    {
      <li class="list-group-item">@url</li>
    }
  </ul>

  <div class="row">
    @foreach (ServerInfo serverInfo in servers)
    {
      <div class="col-md-6 col-lg-4 mb-3">
        <div class="card shadow-sm">
          <div class="card-body">
            <h5 class="card-title">Server ID: @serverInfo.Id</h5>
            <p class="card-text">Term: <strong>@serverInfo.Term</strong></p>
            <p class="text-muted">State: <strong>@((ServerNodeState)serverInfo.ServerStateId)</strong></p>

            <h6>Local Logs</h6>
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Index</th>
                  <th>Term</th>
                  <th>Message</th>
                </tr>
              </thead>
              <tbody>
                @foreach (LogData logData in serverInfo.LogInfo.LocalLogs)
                {
                  <tr>
                    <td>@logData.Index</td>
                    <td>@logData.Term</td>
                    <td>@logData.Log</td>
                  </tr>
                }
              </tbody>
            </table>

            <h6>Committed Logs (State Machine)</h6>
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Index</th>
                  <th>Term</th>
                  <th>Message</th>
                </tr>
              </thead>
              <tbody>
                @foreach (LogData logData in serverInfo.LogInfo.CommittedLogs)
                {
                  <tr>
                    <td>@logData.Index</td>
                    <td>@logData.Term</td>
                    <td>@logData.Log</td>
                  </tr>
                }
              </tbody>
            </table>

            <div class="d-flex justify-content-between mt-3">
              <button @onclick=@(async () => await PauseServer(serverInfo)) class="btn btn-warning">Pause</button>
              <button @onclick=@(async () => await UnpauseServer(serverInfo)) class="btn btn-info"
                disabled="@(serverInfo.ServerStateId != 3)">Unpause</button>
            </div>
          </div>
        </div>
      </div>
    }
  </div>

  <hr>

  <div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Enter log" @bind-value=inputLog>
    <button @onclick=SubmitLog class="btn btn-primary">Submit Log</button>
  </div>
</div>

@code {
  string inputLog = "";
  HttpClient http = new HttpClient();
  string[] Urls = (Environment.GetEnvironmentVariable("NODE_URLS") ?? "").Split(',');
  List<ServerInfo> servers = new List<ServerInfo> { new ServerInfo(), new ServerInfo(), new ServerInfo() };
  Timer? timer;

  protected override void OnInitialized()
  {
    timer = new Timer(async _ =>
    {
      await FetchServerInfo();
      await InvokeAsync(StateHasChanged);
    }, null, 0, 200);
  }

  private async Task FetchServerInfo()
  {
    for (int i = 0; i < Urls.Length; i++)
    {
      try
      {
        var serverInfo = await http.GetFromJsonAsync<ServerInfo>(Urls[i] + "/info");
        if (serverInfo != null)
        {
          servers[i] = serverInfo;
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine($"Error fetching data from {Urls[i]}: {ex.Message}");
      }
    }
  }

  public void Dispose()
  {
    timer?.Dispose();
  }

  public async Task PauseServer(ServerInfo serverInfo)
  {
    RPCFromClientArgs args = new(0, serverShouldBePaused: true);
    string serverUrl = Urls[servers.IndexOf(serverInfo)];
    await http.PostAsJsonAsync(serverUrl + "/from/client", args);
  }

  public async Task PauseAllServers()
  {
    foreach (ServerInfo serverInfo in servers)
    {
      await PauseServer(serverInfo);
    }
  }

  public async Task UnpauseServer(ServerInfo serverInfo)
  {
    RPCFromClientArgs args = new(0, serverShouldBePaused: false);
    string serverUrl = Urls[servers.IndexOf(serverInfo)];
    await http.PostAsJsonAsync(serverUrl + "/from/client", args);
  }

  public async Task UnpauseAllServers()
  {
    foreach (ServerInfo serverInfo in servers)
    {
      await UnpauseServer(serverInfo);
    }
  }

  public async Task SubmitLog()
  {
    ServerInfo? leader = servers.FirstOrDefault((server) => server.ServerStateId == 2);

    if (leader is null || inputLog is null)
    {
      return;
    }

    RPCFromClientArgs args = new(0, log: inputLog);
    string serverUrl = Urls[servers.IndexOf(leader)];
    await http.PostAsJsonAsync(serverUrl + "/from/client", args);
    inputLog = "";
  }
}
