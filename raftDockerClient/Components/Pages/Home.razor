@page "/"
@using Logic.Models.Args;
@using Logic.Models.Server
@using Logic.Models.Server.Logging
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

@foreach (string url in Urls)
{
  <div>@url</div>
}

<br>

@foreach (ServerInfo serverInfo in servers)
{
  <div>Server Id: @serverInfo.Id</div>
  <div>Server Term: @serverInfo.Term</div>
  <div>Local Logs</div>
  @foreach (LogData logData in serverInfo.LogInfo.LocalLogs)
  {
    <div>Index: @logData.Index</div>
    <div>Term: @logData.Term</div>
    <div>Message: @logData.Log</div>
  }
  <div>Committed Logs (State Machine)</div>
  @foreach (LogData logData in serverInfo.LogInfo.CommittedLogs)
  {
    <div>Index: @logData.Index</div>
    <div>Term: @logData.Term</div>
    <div>Message: @logData.Log</div>
  }
  <div>Server State: @((ServerNodeState)serverInfo.ServerStateId)</div>
  <button @onclick=@(async () => await PauseServer(serverInfo)) class="btn-warning">Pause</button>
  <button @onclick=@(async () => await UnpauseServer(serverInfo)) class="btn-info" disabled=@(serverInfo.ServerStateId !=
  3)>Unpause</button>
}

<br>

@* <button @onclick=@(async () => await PauseAllServers()) class="btn-danger">Pause all</button>
<button @onclick=@(async () => await UnpauseAllServers()) class="btn-info">Unpause all</button> *@

@code {
  HttpClient http = new HttpClient();
  string[] Urls = (Environment.GetEnvironmentVariable("NODE_URLS") ?? "").Split(',');
  List<ServerInfo> servers = new List<ServerInfo> { new ServerInfo(), new ServerInfo(), new ServerInfo() };
  Timer? timer;

  protected override void OnInitialized()
  {
    timer = new Timer(async _ =>
    {
      await FetchServerInfo();
      await InvokeAsync(StateHasChanged);
    }, null, 0, 200);
  }

  private async Task FetchServerInfo()
  {
    for (int i = 0; i < Urls.Length; i++)
    {
      try
      {
        var serverInfo = await http.GetFromJsonAsync<ServerInfo>(Urls[i] + "/info");
        if (serverInfo != null)
        {
          servers[i] = serverInfo;
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine($"Error fetching data from {Urls[i]}: {ex.Message}");
      }
    }
  }

  public void Dispose()
  {
    timer?.Dispose();
  }

  public async Task PauseServer(ServerInfo serverInfo)
  {
    RPCFromClientArgs args = new(serverInfo.Id, serverShouldBePaused: true);
    string serverUrl = Urls[servers.IndexOf(serverInfo)];
    await http.PostAsJsonAsync(serverUrl + "/from/client", args);
  }

  public async Task PauseAllServers()
  {
    foreach (ServerInfo serverInfo in servers)
    {
      await PauseServer(serverInfo);
    }
  }

  public async Task UnpauseServer(ServerInfo serverInfo)
  {
    RPCFromClientArgs args = new(serverInfo.Id, serverShouldBePaused: false);
    string serverUrl = Urls[servers.IndexOf(serverInfo)];
    await http.PostAsJsonAsync(serverUrl + "/from/client", args);
  }

  public async Task UnpauseAllServers()
  {
    foreach (ServerInfo serverInfo in servers)
    {
      await UnpauseServer(serverInfo);
    }
  }
}
